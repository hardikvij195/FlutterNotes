FLUTTER BLOC SIMPLE

1 - 



1 -->

Counter_event.dart ->

abstract class CounterEvent{}

class IncrementEvent extends CounterEvent{}

class DecrementEvent extends CounterEvent{}


// Event In -> State Out

2 -->

Counter_bloc.dart ->



import 'dart:async';
import 'counter_event.dart';


class CounterBloc{

  int _counter = 0;

  final _counterStateController = StreamController<int>();

  StreamSink<int> get _incounter => _counterStateController.sink ;

  Stream<int> get counter => _counterStateController.stream ;

  final _counterEventController = StreamController<CounterEvent>();

  Sink<CounterEvent> get counterEventSink => _counterEventController.sink ;

  CounterBloc(){


    _counterEventController.stream.listen(_mapEventToState);

  }


  void _mapEventToState(CounterEvent event){

    if(event is IncrementEvent)
      _counter++;
    else
      _counter--;

    _incounter.add(_counter);

  }


  void dispose(){
    _counterStateController.close();
    _counterEventController.close();
  }

}



Main -->



		StreamBuilder(		
          stream: _bloc.counter,
          initialData: 0,
          builder: (BuildContext  context ,  AsyncSnapshot<int> snapshot){
           return Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                Text(
                  'You have pushed the button this many times:',
                ),
                Text(
                  '${snapshot.data}',
                  style: Theme.of(context).textTheme.headline4,
                ),
              ],
            );
          }
        ),



